{"name":"Jillegal-core","tagline":"Core repository for all Jillegal frameworks","body":"## **What is Jillegal?**\r\n\r\n**Jillegal** is a library including unknown tricks of Java. It abstracts developer from low-level details to implement those tricks.\r\n\r\n\r\n## **What features does Jillegal have?**\r\n\r\n* Accessing and setting any value at any address (as HEX address) in application is supported.\r\n\r\n* Accessing real memory address of any object is supported. So you can change any object in memory by getting its address and copying your custom object to its address.\r\n\r\n* Calculating shallow size of objects, arrays and types is supported.\r\n\r\n* Showing/Dumping memory layout of objects, classes and fields is supported.\r\n\r\n* All of these features are supported for both of 32-bit and 64-bit JVM / OS.\r\n\r\n* All of these features are supported for **Sun HotSpot** JVM and **Oracle JRockit** JVM.\r\n\r\n* All of these features are supported for Java-6 and Java-7.\r\n\r\n* All of these features are supported for both of **compressed-oops** (-XX:+UseCompressedOops) and **uncompressed-oops** (-XX:-UseCompressedOops) modes of JVM.\r\n\r\n\r\n## **Install**\r\n\r\nIn your **pom.xml**, you must add repository and dependency for Jillegal. \r\nYou can change **jillegal.core.version** to any existing **jillegal-core** library version.\r\n\r\n\t...\r\n\t<properties>\r\n\t\t...\r\n\t\t<jillegal.core.version>1.0.0-RELEASE</jillegal.core.version>\r\n\t\t...\r\n\t</properties>\r\n\t...\r\n\t<dependencies>\r\n\t\t...\r\n\t\t<dependency>\r\n\t\t\t<groupId>tr.com.serkanozal</groupId>\r\n\t\t\t<artifactId>jillegal-core</artifactId>\r\n\t\t\t<version>${jillegal.core.version}</version>\r\n\t\t</dependency>\r\n\t\t...\r\n\t</dependencies>\r\n\t...\r\n\t<repositories>\r\n\t\t...\r\n\t\t<repository>\r\n\t\t\t<id>serkanozal-maven-repository</id>\r\n\t\t\t<url>https://github.com/serkan-ozal/maven-repository/raw/master/</url>\r\n\t\t</repository>\r\n\t\t...\r\n\t</repositories>\r\n\t...\r\n\r\n\r\n## **Jillegal-Core with simple examples**\r\n\r\nYou can access all demo codes from here: [jillegal-core-demo](https://github.com/serkan-ozal/jillegal-core-demo)\r\n\r\n\r\n### _Jvm Util Example_\r\n\r\n    JvmUtil.info();\r\n\t\t\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    SampleClass obj = new SampleClass();\r\n\t\t\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\t\t\r\n    long addressOfObj = JvmUtil.addressOf(obj);\r\n    long sizeOfObj = JvmUtil.sizeOf(obj);\r\n    System.out.println(\"Memory Layout of SampleClass object: \");\r\n    System.out.println(\"==========================================================\");\r\n    JvmUtil.dump(addressOfObj, sizeOfObj);\r\n    System.out.println(\"==========================================================\\n\\n\");\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\t\t\r\n    long addressOfField_b = JvmUtil.addressOfStaticField(SampleClass.class, \"b\");\r\n    long addressOfClass = JvmUtil.addressOfClass(obj.getClass());\r\n    long sizeToDump =  (addressOfField_b - addressOfClass) + JvmUtil.BYTE_SIZE;\r\n    System.out.println(\"Memory Layout of SampleClass class: \");\r\n    System.out.println(\"==========================================================\");\r\n    JvmUtil.dump(addressOfClass, sizeToDump);\r\n    System.out.println(\"==========================================================\\n\\n\");\r\n\t\t\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\t\t\r\n    System.out.println(\"Field Layout of SampleClass object: \");\r\n    System.out.println(\"==========================================================\");\r\n    System.out.println(JvmUtil.fieldsLayoutAsString(obj.getClass()));\r\n    System.out.println(\"==========================================================\\n\\n\");\r\n\t\t\r\n    ///////////////////////////////////////////////////////////////////////////////////////\r\n\t\t\r\n    @SuppressWarnings(\"serial\")\r\n    List<SampleClass> list = new ArrayList<SampleClass>() {{\r\n        add(new SampleClass());\r\n        add(new SampleClass());\r\n        add(new SampleClass());\r\n    }};\r\n\t\t\r\n    System.out.println(\"Dump of sample list with elements typed SampleClass: \");\r\n    System.out.println(\"==========================================================\");\r\n    System.out.println(JvmUtil.dump(list));\r\n    System.out.println(\"==========================================================\\n\\n\");\r\n\r\n_Output:_\r\n\r\n    JVM Name                   : Java HotSpot(TM) 64-Bit Server VM\r\n    JVM Version                : 20.5-b03\r\n    JVM Vendor                 : Sun Microsystems Inc.\r\n    Java Version               : 1.6.0_30\r\n    Java Specification Version : 1.6\r\n    Java Runtime Version       : 1.6.0_30-b12\r\n    Java Vendor                : Sun Microsystems Inc.\r\n    OS Architecture            : amd64\r\n    OS Name                    : Windows 7\r\n    OS Version                 : 6.1\r\n    Running 64-bit HotSpot VM.\r\n    Using compressed references with 3-bit shift.\r\n    Objects are 8 bytes aligned.\r\n\r\n    Memory Layout of SampleClass object: \r\n    ==========================================================\r\n    [0x0000]: 01 93 fd 09 7f 00 00 00 a8 41 8c ef 05 00 00 00 \r\n    [0x0010]: 0a 00 00 00 00 00 00 00 \r\n    ==========================================================\r\n\r\n\r\n    Memory Layout of SampleClass class: \r\n    ==========================================================\r\n    [0x0000]: 01 00 00 00 00 00 00 00 4b 00 80 ef 00 00 00 00 \r\n    [0x0010]: 10 e5 e7 6d 00 00 00 00 18 00 00 00 38 00 00 00 \r\n    [0x0020]: 00 00 00 00 00 00 00 00 08 1f 00 7c 07 00 00 00 \r\n    [0x0030]: 58 8e 00 7c 07 00 00 00 40 0d 62 7c 07 00 00 00 \r\n    [0x0040]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0050]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0060]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0070]: c0 0f 62 7c 07 00 00 00 58 8e 00 7c 07 00 00 00 \r\n    [0x0080]: f8 99 28 7c 07 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0090]: 48 fb 61 7c 07 00 00 00 09 00 00 00 21 00 20 00 \r\n    [0x00a0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x00b0]: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x00c0]: c8 11 62 7c 07 00 00 00 88 07 62 7c 07 00 00 00 \r\n    [0x00d0]: f8 1e 00 7c 07 00 00 00 08 1f 00 7c 07 00 00 00 \r\n    [0x00e0]: 08 1f 00 7c 07 00 00 00 48 07 62 7c 07 00 00 00 \r\n    [0x00f0]: f0 04 62 7c 07 00 00 00 d0 01 03 da 07 00 00 00 \r\n    [0x0100]: 18 02 03 da 07 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0110]: 00 00 00 00 00 00 00 00 a0 9e 28 7c 07 00 00 00 \r\n    [0x0120]: 00 00 00 00 00 00 00 00 28 10 62 7c 07 00 00 00 \r\n    [0x0130]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0140]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0150]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0160]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0170]: 00 00 00 00 00 00 00 00 03 00 00 00 01 00 00 00 \r\n    [0x0180]: 00 00 00 00 00 00 00 00 00 01 01 01 00 00 32 00 \r\n    [0x0190]: 05 00 00 00 00 00 00 00 00 c0 57 00 00 00 00 00 \r\n    [0x01a0]: 09 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x01b0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x01c0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x01d0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x01e0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x01f0]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0200]: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0210]: 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00 \r\n    [0x0220]: f0 8c 00 7c 07 00 00 00 80 85 00 7c 07 00 00 00 \r\n    [0x0230]: 68 87 00 7c 07 00 00 00 90 84 00 7c 07 00 00 00 \r\n    [0x0240]: 58 86 00 7c 07 00 00 00 08 09 62 7c 07 00 00 00 \r\n    [0x0250]: 00 0a 62 7c 07 00 00 00 e8 0a 62 7c 07 00 00 00 \r\n    [0x0260]: e0 0b 62 7c 07 00 00 00 00 00 00 00 00 00 00 00 \r\n    [0x0270]: 00 00 00 00 00 00 00 00 64 \r\n    ==========================================================\r\n\r\n\r\n    Field Layout of SampleClass object: \r\n    ==========================================================\r\n    @12  4 SampleClass.i\r\n    @16  8 SampleClass.l\r\n    @24    #shallowSizeOfInstance(tr.com.serkanozal.jillegal.demo.core.util.JvmUtilDemo$SampleClass)\r\n\r\n    ==========================================================\r\n\r\n\r\n    Dump of sample list with elements typed SampleClass: \r\n    ==========================================================\r\n         152       24  root => <#0>\r\n         128       56  +- Object[] elementData => Object[]\r\n          24       24     +- [0] => <SampleClass#2>\r\n          24       24     +- [1] => <SampleClass#3>\r\n          24       24     +- [2] => <SampleClass#4>\r\n\r\n    ==========================================================\r\n\r\n\r\n\r\n### _Direct Memory Access Example_\r\n  \r\n    DirectMemoryService directMemoryService = DirectMemoryServiceFactory.getDirectMemoryService();\r\n\t\t\r\n    SampleClass obj = new SampleClass();\r\n\t\t\r\n    long addressOfField_b = JvmUtil.addressOfField(obj, \"b\");\r\n    long addressOfField_i = JvmUtil.addressOfField(obj, \"i\");\r\n    long addressOfField_l = JvmUtil.addressOfField(obj, \"l\");\r\n\t\t\r\n    System.out.println(\"Value of b with direct memory access: \" + directMemoryService.getInt(addressOfField_b));\r\n    System.out.println(\"Value of i with direct memory access: \" + directMemoryService.getInt(addressOfField_i));\r\n    System.out.println(\"Value of l with direct memory access: \" + directMemoryService.getLong(addressOfField_l));\r\n\t\t\r\n    directMemoryService.putByte(addressOfField_b, (byte)10); // Note that b is final static field\r\n    directMemoryService.putInt(addressOfField_i, 55);\r\n    directMemoryService.putLong(addressOfField_l, 100);\r\n\r\n    System.out.println(\"Values of b, i and l are changed with direct memory access ...\");\r\n\t\t\r\n    System.out.println(\"Value of b with direct memory access: \" + directMemoryService.getByte(addressOfField_b));\r\n    System.out.println(\"Value of i with direct memory access: \" + directMemoryService.getInt(addressOfField_i));\r\n    System.out.println(\"Value of l with direct memory access: \" + directMemoryService.getLong(addressOfField_l));\r\n\t\t\r\n    ///////////////////////////////////////////////////////////////////////////////////////////\r\n\t\t\r\n    SampleClass objSource = new SampleClass();\r\n    SampleClass objTarget = new SampleClass();\r\n\t\t\r\n    objSource.setI(100);\r\n    objSource.setL(1000);\r\n\t\t\r\n    objTarget.setI(200);\r\n    objTarget.setL(2000);\r\n\r\n    System.out.println(\"Value of i on targetObject: \" + objTarget.getI());\r\n    System.out.println(\"Value of l on targetObject: \" + objTarget.getL());\r\n\t\t\r\n    directMemoryService.setObject(objSource, objTarget);\r\n\t\t\r\n    System.out.println(\"Source object has been directly copied to target object ...\");\r\n\t\t\r\n    System.out.println(\"Value of i on targetObject: \" + objTarget.getI());\r\n    System.out.println(\"Value of l on targetObject: \" + objTarget.getL());\r\n\r\n_Output:_\r\n\r\n    Value of b with direct memory access: 100\r\n    Value of i with direct memory access: 5\r\n    Value of l with direct memory access: 10\r\n    Values of b, i and l are changed with direct memory access ...\r\n    Value of b with direct memory access: 10\r\n    Value of i with direct memory access: 55\r\n    Value of l with direct memory access: 100\r\n    Value of i on targetObject: 200\r\n    Value of l on targetObject: 2000\r\n    Source object has been directly copied to target object ...\r\n    Value of i on targetObject: 100\r\n    Value of l on targetObject: 1000\r\n\r\n\r\n## **Roadmap**\r\n\r\n* **IBM J9** JVM support will be added.\r\n","google":"UA-40428552-1","note":"Don't delete this file! It's used internally to help with page regeneration."}